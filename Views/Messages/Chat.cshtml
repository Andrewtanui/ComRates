@model TanuiApp.ViewModels.ChatViewModel

@{
    ViewData["Title"] = "Messages";
}
@{
    ViewData["HideAIWidget"] = true;
}


<div class="container-fluid my-3">
    <div class="row" style="height: calc(100vh - 120px);">
        <!-- Chat list -->
        <div class="col-12 col-md-4 border-end d-flex flex-column p-0 @(string.IsNullOrEmpty(Model.SelectedThreadKey) ? "" : "d-none d-md-flex")" id="chatListView">
            <!-- Sticky Chat List Header -->
            <div class="chat-list-header p-3 border-bottom fw-bold">
                Chats
            </div>

            <!-- Scrollable chat list -->
            <div id="threadList" class="flex-grow-1 overflow-auto">
                @foreach (var t in Model.Threads)
                {
                    var isActive = t.ThreadKey == Model.SelectedThreadKey;
                    <a class="d-flex align-items-center p-3 text-decoration-none @(isActive ? "bg-light" : "")"
                       asp-controller="Messages" asp-action="Chat"
                       asp-route-withUserId="@t.WithUserId" asp-route-productId="@t.ProductId">
                        <img src="@(t.WithUserAvatar ?? "/images/products/default.svg")"
                             class="rounded-circle me-2" style="width:40px;height:40px;object-fit:cover;" />
                        <div class="flex-grow-1">
                            <div class="d-flex justify-content-between">
                                <span class="fw-semibold">@t.WithUserName</span>
                                <small class="text-muted">@t.LastAt.ToShortTimeString()</small>
                            </div>
                            <div class="text-truncate small text-muted">@t.LastMessage</div>
                        </div>
                        @if (t.Unread > 0)
                        {
                            <span class="badge bg-success ms-2">@t.Unread</span>
                        }
                    </a>
                }
            </div>
        </div>

        <!-- Conversation -->
        <div class="col-12 col-md-8 d-flex flex-column p-0 @(string.IsNullOrEmpty(Model.SelectedThreadKey) ? "d-none d-md-flex" : "")"
             id="chatConversation" data-threadkey="@Model.SelectedThreadKey">

            @if (!string.IsNullOrEmpty(Model.SelectedThreadKey))
            {
                var thread = Model.Threads.FirstOrDefault(x => x.ThreadKey == Model.SelectedThreadKey);

                <!-- Sticky Header -->
                <div class="chat-header p-3 border-bottom d-flex justify-content-between align-items-center">
                    <div class="d-flex align-items-center">
                        <!-- Back button (mobile only) -->
                        <button class="btn btn-link d-md-none me-2" onclick="showChatList()">
                            <i class="bi bi-arrow-left"></i>
                        </button>
                        <img src="@(thread?.WithUserAvatar ?? "/images/products/default.svg")"
                             class="rounded-circle me-2" style="width:40px;height:40px;object-fit:cover;" />
                        <span class="fw-bold">@thread?.WithUserName</span>
                    </div>
                    @if ((bool)(ViewBag.CanDeleteThread ?? false))
                    {
                        <form asp-controller="Messages" asp-action="DeleteThread" method="post"
                              onsubmit="return confirm('Delete this conversation for both participants?');">
                            <input type="hidden" name="threadKey" value="@Model.SelectedThreadKey" />
                            <button type="submit" class="btn btn-outline-danger btn-sm">
                                <i class="bi bi-trash"></i>
                            </button>
                        </form>
                    }
                </div>

                <!-- Scrollable Messages -->
                <div id="messageList" class="chat-messages flex-grow-1 overflow-auto p-3 d-flex flex-column position-relative">
                    @foreach (var m in Model.Messages)
                    {
                        var myId = User.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.Value;
                        var isMine = m.SenderId == myId;
                        <div class="d-flex mb-2 @(isMine ? "justify-content-end" : "justify-content-start")">
                            <div class="chat-bubble @(isMine ? "mine" : "their")">
                                <div>@m.Content</div>
                                <div class="chat-meta">
                                    @m.CreatedAt.ToShortTimeString()
                                    @if (isMine)
                                    {
                                        var status = m.IsRead ? "✓✓" : "✓";
                                        <span class="@(m.IsRead ? "text-primary" : "text-muted")">@status</span>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- Sticky Input -->
                <div class="chat-input border-top p-3">
                    <form id="sendForm" asp-controller="Messages" asp-action="Send" method="post"
                          class="d-flex gap-2">
                        <input type="hidden" name="recipientId" value="@Model.WithUserId" />
                        <input type="hidden" name="productId" value="@Model.ProductId" />
                        <input id="contentInput" type="text" name="content" class="form-control"
                               placeholder="Type a message..." required />
                        <button type="submit" class="btn btn-success"><i class="bi bi-send"></i></button>
                    </form>
                </div>
            }
            else
            {
                <div class="p-3">Select a chat to start messaging</div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        function showChatList() {
            document.getElementById("chatConversation").classList.add("d-none");
            document.getElementById("chatListView").classList.remove("d-none");
        }

        const container = document.querySelector('[data-threadkey]');
        const threadKey = container?.getAttribute('data-threadkey');
        const list = document.getElementById('messageList');

        function scrollToBottom() {
            if (list) {
                requestAnimationFrame(() => {
                    list.scrollTop = list.scrollHeight;
                });
            }
        }

        if (threadKey && list) {
            const connection = new signalR.HubConnectionBuilder()
                .withUrl('/hubs/messages')
                .withAutomaticReconnect()
                .build();

            connection.on('ReceiveMessage', (msg) => {
                const wrapper = document.createElement('div');
                wrapper.className = 'd-flex mb-2 justify-content-start';
                wrapper.innerHTML = `
                    <div class="chat-bubble their">
                        <div>${escapeHtml(msg.content)}</div>
                        <div class="chat-meta">just now</div>
                    </div>`;
                list.appendChild(wrapper);

                // Always scroll to bottom for new messages
                scrollToBottom();
            });

            connection.start()
                .then(() => connection.invoke('JoinThread', threadKey))
                .catch(console.error);

            // Auto-scroll once everything is rendered
            window.addEventListener("load", () => {
                setTimeout(scrollToBottom, 200);
            });

            // Auto-scroll when sending a message
            document.getElementById("sendForm")?.addEventListener("submit", () => {
                setTimeout(scrollToBottom, 100);
            });
        }

        function escapeHtml(str) {
            return str.replace(/[&<>"']/g, (c) =>
                ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;' }[c]));
        }
    </script>
}

<style>
    .chat-list-header {
        position: sticky;
        top: 0;
        background: #ffffff;
        z-index: 15;
    }

    .chat-header {
        position: sticky;
        top: 0;
        background: #ffffff;
        z-index: 15;
    }

    .chat-input {
        position: sticky;
        bottom: 0;
        background: #fff;
        z-index: 15;
    }

    .chat-messages {
        flex: 1 1 auto;
        overflow-y: auto;
    }

    .chat-bubble {
        padding: 8px 12px;
        border-radius: 16px;
        max-width: 70%;
        word-wrap: break-word;
        font-size: 0.95rem;
    }

        .chat-bubble.mine {
            background: #8fb6ff;
            align-self: flex-end;
        }

        .chat-bubble.their {
            background: #fff;
            border: 1px solid #e0e0e0;
            align-self: flex-start;
        }

    .chat-meta {
        font-size: 0.75rem;
        text-align: right;
        margin-top: 2px;
        color: gray;
    }
</style>