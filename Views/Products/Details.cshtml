@model TanuiApp.Models.Product
@using Microsoft.AspNetCore.Identity
@inject UserManager<TanuiApp.Models.Users> _userManager

<div class="container my-5">
    <div class="row">
        <div class="col-md-6">
            <img src="@Model.ImageUrl" alt="@Model.Name" class="img-fluid rounded shadow" />
        </div>
        <div class="col-md-6">
            <h2 class="fw-bold">@Model.Name</h2>
            <p class="text-muted">Category: @Model.Category</p>
            <p>@Model.Description</p>
            <h4 class="text-success fw-bold">Ksh @Model.Price</h4>

            @if (Model.User != null)
            {
                <p class="mt-3">
                    <strong>Seller:</strong> @Model.User.UserName <br />
                    <small class="text-muted">Joined on @Model.User.CreatedAt.ToString("MMMM yyyy")</small>
                </p>
                @if (User.Identity.IsAuthenticated && Model.User.Id != _userManager.GetUserId(User))
                {
                    <a class="btn btn-outline-success btn-sm" asp-controller="Messages" asp-action="Chat" asp-route-withUserId="@Model.User.Id" asp-route-productId="@Model.Id">
                        <i class="bi bi-chat-dots"></i> Message Seller
                    </a>
                }
            }

            <form asp-action="AddToCart" method="post">
                <input type="hidden" name="productId" value="@Model.Id" />
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-cart-plus"></i> Add to Cart
                </button>
            </form>
        </div>
    </div>

    <hr class="my-4" />

    <!-- ✅ Reviews Section -->
    <h4 class="fw-bold">Reviews</h4>
    @if (ViewBag.Reviews != null && ViewBag.Reviews.Count > 0)
    {
        foreach (var review in ViewBag.Reviews)
        {
            <div class="card mb-3 review-item" id="review-@review.Id">
                <div class="card-body">
                    <div class="mb-2 text-warning">
                        @for (int i = 1; i <= 5; i++)
                        {
                            if (i <= review.Rating)
                            {
                                <i class="bi bi-star-fill"></i>
                            }
                            else
                            {
                                <i class="bi bi-star"></i>
                            }
                        }
                    </div>
                    <p>@review.Content</p>
                    <small class="text-muted">Posted on @review.CreatedAt.ToString("g")</small>

                    @if (User.Identity.IsAuthenticated &&
                                (review.UserId == _userManager.GetUserId(User) || Model.User?.Id == _userManager.GetUserId(User)))
                    {
                        <button type="button" class="btn btn-sm btn-danger delete-review"
                                data-id="@review.Id">
                            Delete
                        </button>
                    }
                </div>
            </div>
        }
    }
    else
    {
        <p class="text-muted">No reviews yet. Be the first to leave one!</p>
    }

    @if (User.Identity.IsAuthenticated)
    {
        <div class="mt-4">
            <h5>Add a Review</h5>
            <form asp-action="AddReview" method="post">
                <input type="hidden" name="productId" value="@Model.Id" />

                <!-- ⭐ Modern Star Rating -->
                <div class="mb-3">
                    <label class="form-label">Your Rating</label>
                    <div class="star-rating">
                        <input type="hidden" name="rating" id="ratingInput" value="0" />
                        <span class="star" data-value="1">&#9733;</span>
                        <span class="star" data-value="2">&#9733;</span>
                        <span class="star" data-value="3">&#9733;</span>
                        <span class="star" data-value="4">&#9733;</span>
                        <span class="star" data-value="5">&#9733;</span>
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label">Your Comment</label>
                    <textarea name="Content" class="form-control" rows="3" required></textarea>
                </div>

                <button type="submit" class="btn btn-success">Submit Review</button>
            </form>
        </div>
    }

    <hr class="my-4" />

    <h4 class="fw-bold">Comments</h4>
    @if (Model.Comments != null && Model.Comments.Any())
    {
        foreach (var comment in Model.Comments.OrderByDescending(c => c.CreatedAt))
        {
            <div class="card mb-2">
                <div class="card-body">
                    <p>@comment.Text</p>
                    <small class="text-muted">Posted on @comment.CreatedAt.ToString("g")</small>
                </div>
            </div>
        }
    }
    else
    {
        <p class="text-muted">No comments yet.</p>
    }

    @if (User.Identity.IsAuthenticated)
    {
        <div class="mt-3">
            <h5>Add a Comment</h5>
            <form asp-action="AddComment" method="post">
                <input type="hidden" name="productId" value="@Model.Id" />
                <div class="mb-3">
                    <textarea name="text" class="form-control" rows="2" required></textarea>
                </div>
                <button type="submit" class="btn btn-primary">Post Comment</button>
            </form>
        </div>
    }
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        // Delete review
        $(document).on("click", ".delete-review", function () {
            let reviewId = $(this).data("id");
            if (!confirm("Are you sure you want to delete this review?")) return;

            $.ajax({
                url: '@Url.Action("DeleteReview", "Products")',
                type: "POST",
                data: { id: reviewId },
                success: function (response) {
                    if (response.success) {
                        $("#review-" + reviewId).fadeOut(500, function () { $(this).remove(); });
                    } else {
                        alert(response.message || "Error deleting review.");
                    }
                },
                error: function () {
                    alert("Something went wrong. Please try again.");
                }
            });
        });

        // ⭐ Star rating script
        document.querySelectorAll(".star-rating .star").forEach(star => {
            star.addEventListener("mouseover", function () {
                highlightStars(this.dataset.value);
            });
            star.addEventListener("mouseout", function () {
                highlightStars(document.getElementById("ratingInput").value);
            });
            star.addEventListener("click", function () {
                document.getElementById("ratingInput").value = this.dataset.value;
                highlightStars(this.dataset.value);
            });
        });

        function highlightStars(value) {
            document.querySelectorAll(".star-rating .star").forEach(star => {
                star.style.color = parseInt(star.dataset.value) <= value ? "gold" : "#ccc";
            });
        }
    </script>

    <style>
        .star-rating {
            font-size: 2rem;
            cursor: pointer;
        }

        .star {
            color: #ccc;
            transition: color 0.2s;
        }

            .star:hover {
                color: gold;
            }
    </style>
}
