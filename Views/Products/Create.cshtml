@model TanuiApp.ViewModels.ProductCreateViewModel

@{
    ViewData["Title"] = "Create Product";
}

<div class="container my-5">
    <h2 class="fw-bold mb-4">Create Product</h2>

    <form asp-action="Create" enctype="multipart/form-data" method="post">
        <div class="mb-3">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    <label asp-for="Name" class="form-label"></label>
                    <input asp-for="Name" class="form-control" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="Description" class="form-label"></label>
                    <textarea asp-for="Description" class="form-control"></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="Price" class="form-label"></label>
                    <input asp-for="Price" class="form-control" type="number" step="0.01" />
                    <span asp-validation-for="Price" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="Quantity" class="form-label"></label>
                    <input asp-for="Quantity" class="form-control" type="number" min="0" />
                    <span asp-validation-for="Quantity" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="Category" class="form-label"></label>
                    <select asp-for="Category" class="form-control">
                        <option value="">-- Select Category --</option>
                        <option>Phones</option>
                        <option>TV's</option>
                        <option>Laptops</option>
                        <option>Chargers</option>
                        <option>Speakers</option>
                        <option>Furniture</option>
                        <option>Beauty & Personal Care</option>
                        <option>Food</option>
                        <option>Books</option>
                        <option>Services</option>
                    </select>
                    <span asp-validation-for="Category" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label class="form-label">Product Images (up to 5)</label>
                    <div id="drop-area" class="border rounded p-4 text-center bg-light">
                        <p class="mb-2">Drag & drop images here, or click to select (max 5)</p>
                        <input type="file" name="ImageFiles" id="ImageFiles" class="form-control d-none"
                            accept="image/*" multiple />
                        <button type="button" class="btn btn-outline-primary mt-2"
                            onclick="document.getElementById('ImageFiles').click()">Choose Images</button>
                        <span class="text-danger d-block mt-2" id="imageFilesValidation"></span>
                    </div>
                    <div id="previewContainer" class="d-flex flex-wrap mt-3"></div>
                    <small class="text-muted">Drag images to rearrange their order.</small>
                </div>

                <button type="submit" class="btn btn-success w-100">Save</button>
            </div>

            <!-- ✅ Live Image Previews -->
            <div class="col-md-6 d-flex flex-wrap align-items-start" id="previewContainerSide"></div>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        const fileInput = document.getElementById('ImageFiles');
        const dropArea = document.getElementById('drop-area');
        const previewContainer = document.getElementById('previewContainer');
        let imageFiles = [];

        function showPreviews(files) {
            previewContainer.innerHTML = '';
            files.forEach((file, idx) => {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const imgDiv = document.createElement('div');
                    imgDiv.className = 'm-2 position-relative';
                    imgDiv.draggable = true;
                    imgDiv.dataset.idx = idx;
                    imgDiv.style.display = 'inline-block';
                    imgDiv.style.cursor = 'grab';

                    const img = document.createElement('img');
                    img.src = e.target.result;
                    img.className = 'img-fluid rounded shadow-sm';
                    img.style.maxHeight = '120px';
                    imgDiv.appendChild(img);

                    // Drag events
                    imgDiv.addEventListener('dragstart', (ev) => {
                        ev.dataTransfer.setData('text/plain', idx);
                        imgDiv.style.opacity = '0.5';
                    });
                    imgDiv.addEventListener('dragend', () => {
                        imgDiv.style.opacity = '1';
                    });
                    imgDiv.addEventListener('dragover', (ev) => {
                        ev.preventDefault();
                        imgDiv.style.border = '2px dashed #007bff';
                    });
                    imgDiv.addEventListener('dragleave', () => {
                        imgDiv.style.border = '';
                    });
                    imgDiv.addEventListener('drop', (ev) => {
                        ev.preventDefault();
                        imgDiv.style.border = '';
                        const fromIdx = parseInt(ev.dataTransfer.getData('text/plain'));
                        const toIdx = idx;
                        if (fromIdx !== toIdx) {
                            const moved = imageFiles.splice(fromIdx, 1)[0];
                            imageFiles.splice(toIdx, 0, moved);
                            showPreviews(imageFiles);
                            updateFileInput();
                        }
                    });

                    previewContainer.appendChild(imgDiv);
                }
                reader.readAsDataURL(file);
            });
        }

        function updateFileInput() {
            // Create a new DataTransfer to reorder files
            const dt = new DataTransfer();
            imageFiles.forEach(f => dt.items.add(f));
            fileInput.files = dt.files;
        }

        fileInput.addEventListener('change', function () {
            imageFiles = Array.from(this.files).slice(0, 5);
            showPreviews(imageFiles);
            updateFileInput();
        });

        dropArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            dropArea.classList.add('bg-primary', 'text-white');
        });
        dropArea.addEventListener('dragleave', () => {
            dropArea.classList.remove('bg-primary', 'text-white');
        });
        dropArea.addEventListener('drop', (e) => {
            e.preventDefault();
            dropArea.classList.remove('bg-primary', 'text-white');
            if (e.dataTransfer.files.length) {
                imageFiles = Array.from(e.dataTransfer.files).slice(0, 5);
                showPreviews(imageFiles);
                updateFileInput();
            }
        });
    </script>
}