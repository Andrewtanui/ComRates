@using Microsoft.AspNetCore.Identity
@using TanuiApp.Models
@inject SignInManager<Users> SignInManager
@inject UserManager<Users> UserManager
@{
    // Precompute role flags once to keep markup clean
    var isSeller = false;
    var isDeliveryService = false;
    var isSystemAdmin = false;
    var isBuyer = false;
    if (SignInManager.IsSignedIn(User))
    {
        var currentUser = await UserManager.GetUserAsync(User);
        isSystemAdmin = currentUser?.UserRole == UserRole.SystemAdmin;
        isSeller = currentUser?.UserRole == UserRole.Seller;
        isDeliveryService = currentUser?.UserRole == UserRole.DeliveryService;
        isBuyer = currentUser?.UserRole == UserRole.Buyer;
    }
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - ComRates</title>
    <base href="~/" />

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">

    <!-- Site CSS -->
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/TanuiApp.styles.css" asp-append-version="true" />

    @RenderSection("Styles", required: false)
</head>
<body>
    <header>
        <nav id="mainNavbar" class="navbar navbar-expand-lg fixed-top shadow-sm">
            <div class="container-fluid">
                <!-- Brand -->
                <a class="navbar-brand fw-bold" asp-area="" asp-controller="Home" asp-action="Index">
                    <i class="bi bi-shop me-2"></i>ComRates
                </a>

                <!-- Right-side controls: Search + Chat + Hamburger -->
                <div class="d-flex align-items-center order-lg-3 order-1">
                    @if (SignInManager.IsSignedIn(User))
                    {
                        @* Search: Only for Buyers *@
                        @if (isBuyer)
                        {
                            <!-- Search (desktop only) -->
                            <form class="d-none d-md-flex me-2" asp-controller="Products" asp-action="Search" method="get">
                                <div class="input-group">
                                    <input class="form-control" type="search" name="query" placeholder="Search..." aria-label="Search">
                                    <button class="btn btn-light" type="submit"><i class="bi bi-search"></i></button>
                                </div>
                            </form>
                        }

                        @* Chat: Available for Sellers and Delivery, hidden for Admin *@
                        @if (!isSystemAdmin)
                        {
                            <!-- Chat button -->
                            <a class="btn btn-light me-2" asp-controller="Messages" asp-action="Chat">
                                <i class="bi bi-chat-dots"></i>
                            </a>
                        }
                    }

                    <!-- Hamburger -->
                    <button class="navbar-toggler ms-2" type="button" data-bs-toggle="collapse"
                            data-bs-target="#navbarNav" aria-controls="navbarNav"
                            aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                </div>

                <!-- Collapsible Nav -->
                <div class="collapse navbar-collapse order-lg-2 order-3" id="navbarNav">
                    <ul class="navbar-nav flex-grow-1 me-3">
                        @if (isSystemAdmin)
                        {
                            <li class="nav-item">
                                <a class="nav-link" asp-controller="AdminDashboard" asp-action="Index">
                                    <i class="bi bi-shield-check me-1"></i>Admin Dashboard
                                </a>
                            </li>
                        }
                        else if (isSeller)
                        {
                            <li class="nav-item">
                                <a class="nav-link" asp-controller="SellerDashboard" asp-action="Index">
                                    <i class="bi bi-speedometer2 me-1"></i>Dashboard
                                </a>
                            </li>
                        }
                        else if (isDeliveryService)
                        {
                            <li class="nav-item">
                                <a class="nav-link" asp-controller="DeliveryDashboard" asp-action="Index">
                                    <i class="bi bi-truck me-1"></i>Delivery Dashboard
                                </a>
                            </li>
                        }
                        else
                        {
                            <li class="nav-item">
                                <a class="nav-link" asp-area="" asp-controller="Home" asp-action="Index">
                                    <i class="bi bi-house me-1"></i>Home
                                </a>
                            </li>
                        }

                        @if (SignInManager.IsSignedIn(User))
                        {
                            @* Categories: Only for Buyers *@
                            @if (isBuyer)
                            {
                                @await Component.InvokeAsync("CategoryMenu")
                            }

                            @* Products: Only for Buyers *@
                            @if (isBuyer)
                            {
                                <li class="nav-item">
                                    <a class="nav-link" asp-controller="Products" asp-action="Index">Products</a>
                                </li>
                            }
                            
                            @* Sell: Only for Sellers *@
                            @if (isSeller)
                            {
                                <li class="nav-item">
                                    <a class="nav-link" asp-controller="Products" asp-action="Create">
                                        <i class="bi bi-shop me-1"></i>Sell
                                    </a>
                                </li>
                            }
                        }

                        <li class="nav-item">
                            <a class="nav-link" asp-controller="Home" asp-action="About">
                                <i class="bi bi-info-circle me-1"></i>About
                            </a>
                        </li>
                    </ul>

                    @if (SignInManager.IsSignedIn(User))
                    {
                        @* Search (mobile): Only for Buyers *@
                        @if (isBuyer)
                        {
                            <!-- Search (mobile only) -->
                            <form class="d-md-none mb-2" asp-controller="Products" asp-action="Search" method="get">
                                <div class="input-group">
                                    <input class="form-control" type="search" name="query" placeholder="Search..." aria-label="Search">
                                    <button class="btn btn-light" type="submit"><i class="bi bi-search"></i></button>
                                </div>
                            </form>
                        }

                        @* Notifications: Hidden for System Admin *@
                        @if (!isSystemAdmin)
                        {
                            <!-- Notifications -->
                            <a class="btn btn-light position-relative me-2" asp-controller="Notifications" asp-action="Index">
                                <i class="bi bi-bell"></i>
                                <span id="notifBadge" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger d-none">0</span>
                            </a>
                        }
                    }

                    <partial name="_LoginPartial" />
                </div>
            </div>
        </nav>
    </header>

    <main role="main" class="pb-3">
        @RenderBody()
    </main>

    <!-- Scripts -->
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    <script>
        // Transparent-to-solid navbar
        window.addEventListener("scroll", function () {
            const navbar = document.getElementById("mainNavbar");
            const hero = document.querySelector('.hero-section');
            if (!hero) return;

            if (window.scrollY > hero.offsetHeight) {
                navbar.classList.add('solid');
                navbar.classList.remove('transparent');
            } else {
                navbar.classList.remove('solid');
                navbar.classList.add('transparent');
            }
        });

        // Notifications SignalR client
        (function(){
            const badge = document.getElementById('notifBadge');
            if (!badge) return;
            const s = document.createElement('script');
            s.src = 'https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js';
            s.onload = () => {
                const conn = new signalR.HubConnectionBuilder().withUrl('/hubs/notifications').withAutomaticReconnect().build();
                conn.on('Notify', () => {
                    const current = parseInt(badge.textContent || '0');
                    const next = current + 1;
                    badge.textContent = String(next);
                    badge.classList.remove('d-none');
                });
                conn.start().catch(console.error);
            };
            document.head.appendChild(s);
        })();
    </script>

    @await RenderSectionAsync("Scripts", required: false)
    
    @if (SignInManager.IsSignedIn(User) && !(ViewData["HideAIWidget"] as bool? ?? false))
    {
        <partial name="_AskAIWidget" />
    }

    <!-- Toast Notification Container -->
    <div id="toastContainer" style="position: fixed; bottom: 20px; right: 20px; z-index: 9999; min-width: 300px;"></div>

    <script>
        // Global Toast Notification System
        window.showNotificationToast = function(message, type = 'info', duration = 3000) {
            const container = document.getElementById('toastContainer');
            if (!container) return;

            const toastId = 'toast-' + Date.now();
            const iconMap = {
                'success': 'bi-check-circle-fill text-success',
                'error': 'bi-x-circle-fill text-danger',
                'warning': 'bi-exclamation-triangle-fill text-warning',
                'info': 'bi-info-circle-fill text-info'
            };
            const bgMap = {
                'success': 'bg-success',
                'error': 'bg-danger',
                'warning': 'bg-warning',
                'info': 'bg-info'
            };

            const icon = iconMap[type] || iconMap['info'];
            const bgColor = bgMap[type] || bgMap['info'];

            const toast = document.createElement('div');
            toast.id = toastId;
            toast.className = 'toast show mb-2';
            toast.setAttribute('role', 'alert');
            toast.innerHTML = `
                <div class="toast-header ${bgColor} text-white">
                    <i class="bi ${icon} me-2"></i>
                    <strong class="me-auto">Notification</strong>
                    <button type="button" class="btn-close btn-close-white" onclick="document.getElementById('${toastId}').remove()"></button>
                </div>
                <div class="toast-body">
                    ${message}
                </div>
            `;

            container.appendChild(toast);

            // Auto-remove after duration
            setTimeout(() => {
                toast.style.transition = 'opacity 0.3s';
                toast.style.opacity = '0';
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.remove();
                    }
                }, 300);
            }, duration);
        };

        // Enhanced SignalR to show toast notifications
        (function(){
            const badge = document.getElementById('notifBadge');
            if (!badge) return;
            const s = document.createElement('script');
            s.src = 'https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js';
            s.onload = () => {
                const conn = new signalR.HubConnectionBuilder().withUrl('/hubs/notifications').withAutomaticReconnect().build();
                conn.on('Notify', (title, body) => {
                    const current = parseInt(badge.textContent || '0');
                    const next = current + 1;
                    badge.textContent = String(next);
                    badge.classList.remove('d-none');
                    
                    // Show toast notification
                    const message = title + (body ? ': ' + body : '');
                    window.showNotificationToast(message, 'info', 3000);
                });
                conn.start().catch(console.error);
            };
            document.head.appendChild(s);
        })();
    </script>

</body>
</html>
